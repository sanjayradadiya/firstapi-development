variable declaration
database handling
for/for each loop
while loop
operators
if else
switch
function
datatype
class
file handling

PHP:  
    php is server side scripting langauage.
    php file extenstion is .php.
    php syntex is <?php echo "hello world";  ?> . ->echo statement for print result.
    php statement end with(;).
    php comments- //for single line comments.   /* multiline comments */

   if statements:
    
    <?php
    a = 20;
    b = 30;
    if(a > b)
    {
       echo "a greater than b";
    }
    ?>

   else statements:
   <?php
    x=10;
    y=20;
    if(a>b)
    {  
      echo "x is greater than 20";

    }
    else
    {
      echo "y is greater than x";
    }
    ?>

   elseif statements:
     
      if(a>b)
      {
         echo "a greater than b";
      }
      elseif(a==b)
      {
         echo "a & b are same";
      }
      else{
         echo "b is greater than a";
      }
     
    while loop:
        while loop in- while(condition is true){ code }
    
    do while:
        do while in - do { code to be exeuted }  while(condition is true);

    for loop:
        <?php
        for($i=0;$x<=10;$i++){}
        ?>

    for each:
         <?php
         foreach($array as $value)
         {
            code to be executed
         }
         ?>

    switch:

    <?php
        switch(n){
          case label1:
               code
               break;
          case label2:
               code
               break;
          default:
               code 
        }
    ?>


    break:
       jump out

    continue:
       one condition occur and then condition continue.

    array:

       $cars=array("volvo","BMW");

       $car[1]="week";
       $car[2]="reep";

    associative
        $age=array("peter"=>"35")

    multidimentonal:
        
         $car=array(
           array("volvo"),
         );

 sorting:

      $car=array("23","65");
      sort($car)

      rsort($car)

      $car=array("week"=> "7","days"=>"3");
      asort($car)


      ksort($car)

   function:

      function functionName(){
        code to be executed
      }
    
python:
    python is programming langauage.
    python file  extenstion is .py .
    python syntex is  print("hello world").  ->print statement for output.
    python statement no need semicolon(;).
  1.  python comments-   
              # for single line comments
                       """ for multiline 
                            comments """

  2. variable declrations:
       variable=it is containers for storing data values.

         x = 5  integer   print(x)
         g = "week"   string
         s = 'string'
         f = 10.5     floating
         r = true     boolean
         
         variable name are case sensitive
            a = 4
            A = 45 
            both are different

         show the type of datatype
            print(type(x)

         variable names:   
                                                illegel variable name
            myvar = "john"                            2myvar
            my_var = "s"                              my-var
            myvar2                                    my var
            _mys
            MYVAR
            
            Casting
              x=str(3)
              y=int(3)

              y = "John"
              print(type(x))

            pascal case
               MyVariableName
            camel case
               myVaribleName
            snake case
               my_variable_name
            
          multiple values to many variable 
             x, y, z="oange","apple","cherry"
             print(x)
             print(y)
             print(z)

          one value to multiple variable
             x = y = z = "orange"
             print(x)
             print(y)
             print(z)

         unpack collection:extract the values into variables

          fruits = array["apple","banana","cherry"]
          x, y, z = fruits
          print(x)
          print(y)
          print(z)

         
          operators using throw multiple values

            x = "python"
            y = "is"
            z = "programming"
            print(x + y + z)
         
          global variable:
             outside the function

             x = "awesome"

             def myfunc():
               print("Python is " + x)

             myfunc()

             x = "awesome"

           ex:-2
             x="awesome"
             def myfunc():
                x = "fantastic"
                print("Python is " + x)

             myfunc()
             print("Python is " + x)

           global keyword:
              def myfunc():
                global x
                x = "good"
              myfunc()
              print("Python is " + x)

     Built-in Data Types:
          Variables can store data of different types, and different types can do different things.     
     
     Text Type:	str
       str="str"

     Numeric Types:	int, float, complex
       str=1
       str=20.3
       str=1w

     Sequence Types:list, tuple, range
        list=["str","week","deep"]
        tuple=("banana","cherry","apple")
        range=range(6)


     Mapping Type:dict
        dict={"name":"zansi","age":"20"}
     
     Set Types:	set, frozenset
        set={"zansi","mansi","radhika"}
        set=frozenset({"zanu","shivu","radhu"})

     Boolean Type:bool
        deep=true
      
     None Type:	NoneType
        x=none

     specifying datatype:

       str=int("3")
       y = int(2.8) 

     string-slicing:
         return a range of characters by using the slice syntax.

         b = "savewater"
         print(b[2:5])
          
         print(b[:5])

         print(b[2:])

         print(b[-5:-2])

         print(b.upper())
         print(a.lower())

         a = " Hello, World! "
         print(a.strip())

         print(a.replace("H", "J"))

         a = "Hello, World!"
         print(a.split(","))

       concatenate variable
         a = "hello"
         b = "world"
         c = a + b
         print(c)

         f string:
            name = "zansi"
            print(f"Your name is {name}.")

            a = "Hello"
            b = "World"
            c = a + " " + b
            print(c)

          escape character:
            txt = "We are the so-called \" Vikings  \" from the north."
          
          boolean:

            print(10 > 9)
            print(10 == 9)
            print(10 < 9)

          
          print(bool("Hello"))
          print(bool(15))

          def myFunction() :
             return True 
          print(myFunction())

          x = 200
          print(isinstance(x, int))


          Operators:
               used to perform operations on variables and values.

            Arithmetic:
               +
               -
               %
               *
               /

            Assignment:
               +=
               -=
               *=
               /=
               %=

            comparison:
               ==
               !=
               >
               <
               >=
               <=

            logical:
               x < 5 and x < 10

               x < 5 or x < 4

               not(x < 5 and x < 4)

            x = ["apple", "banana"]
            y = ["apple", "banana"]
            z = x
            print(x is z)

            print(x is not z)


     List:
       Lists are used to store multiple items in a single variable.
       
      thislist = ["apple", "banana", "cherry"]
      print(thislist)
     
       Allow Duplicates
         thislist = ["apple", "banana", "cherry", "apple", "cherry"]
         print(thislist)

      length:
         thislist = ["apple", "banana", "cherry"]
         print(len(thislist))

      mylist = ["apple", "banana", "cherry"]
      print(type(mylist))


      Tuple:
         Tuples are used to store multiple items in a single variable.

         thistuple = ("apple", "banana", "cherry")
         print(thistuple)   

      Set:
        Sets are used to store multiple items in a single variable.

        myset = {"apple", "banana", "cherry"}

      Dictionary
         Dictionaries are used to store data values in key:value pairs.
         ordered, changeable and do not allow duplicates.

           thisdict = {
              "brand": "Ford",
              "model": "Mustang",
              "year": 1964
           }
           print(thisdict)

          print(thisdict["brand"])

          not allow duplicate
            thisdict = {
              "brand": "Ford",
              "model": "Mustang",
              "year": 1964,
              "year": 2020
            }
           print(thisdict["year"])

            output:
                 2020

      length dictionary:
            thisdict = {
              "brand": "Ford",
              "model": "Mustang",
              "year": 1964,
              "year": 2020
            }
            print(len(thisdict))
      
      type:
         thisdict = {
            "brand": "Ford",
            "model": "Mustang",
            "year": 1964
         }
         print(type(thisdict))

      

    if statements:

        a = 20
        b = 30
        if a > b:
           print("a greater than b")

           - python in no need to curely-brakets for scope(ex: if,function) of code.while php using curely-brakets for scope.

           if a > b:
           print("a greater than b")
              -without raise error no white spacing for scope of code.
              -minimum white 1 space using. 

    else statements:

         a = 10
         b = 20
         if a > b:
            print("a is greater than b")
         else:
            print("b is greater than a")

    elif statements:

         a = 10
         b = 20
         if a > b:
            print("a is greater than b")
         elif a == b:
            print("a and b are equal")
         else:
            print("b is greater than b")

    while loop:
          can execute a set of statements as long as a condition is true.
       
        i = 1
        while i < 6:
          print(i)
          i += 1
      
      break statment
         stop when one condition is true
         i = 1
         while i < 6:
            print(i)
            if i == 3:
                break
            i += 1
      

     continue statment
        continue when one condition is true
      i = 0
      while i < 6
        i += 1
        if i == 3:
          continue
        print(i)

     else statment in while loop:
       i = 1
       while i < 6:
         print(i)
         i += 1
       else:
         print("i is no longer less than 6")

     
     for loop:
          can execute a set of statements, for each item in a list, tuple, set 

     fruits = ["apple", "banana", "cherry"]
     for x in fruits:
       print(x)
      
        take words 
          
          for x in "banana":
            print(x)

      break stament:

      fruits = ["apple", "banana", "cherry"]
      for x in fruits:
        print(x)
        if x == "banana":
          break
       
       fruits = ["apple", "banana", "cherry"]
       for x in fruits:
         if x == "banana":
           break
         print(x)

       continue statement:
         fruits = ["apple", "banana", "cherry"]
         for x in fruits:
           if x == "banana":
             continue
           print(x)  

      range :
      for x in range(6):
         print(x)

      range start 2 end  6
         for x in range(2, 6):
           print(x)

       range start 2 and end 20 increment 2 
             for x in range(2, 30, 3):
                print(x)

      else not excute:
       for x in range(6):
         if x == 3: break
         print(x)
       else:
         print("Finally finished!")         

       

       file handling:

          file open,file read, file updating, file deleting etc.

          r-read
          w-write
          a-append
          x-create
          t-text
          b-binary

          demofile.txt
             this is very important.python is programming langauage.

          demo.py
          open:
          f = open("demofile.txt")

          read:
          f = open("demofile.txt", "r")
          print(f.read()) 
           
          read 5 character:
          f = open("demofile.txt", "r")
          print(f.read(5))

          read line:
          f = open("demofile.txt", "r")
          print(f.readline())

          whole file read line by line:
          f = open("demofile.txt", "r")
          for x in f:
            print(x)

          close the file:
          f = open("demofile.txt", "r")
          print(f.readline())
          f.close()

          delete the file:
            import os
            os.remove("demofile.txt")

          if file exists or not
            import os
            os.remove("demofile.txt")
            python demo.py 

          class and object:
             class is blueprint for creating object.
             object is instance of object.
             keyword class
              
              syntex:

                 class classname:
                 
              ex:
                 class myclass:
                     x =  5 

                 creating object:

                   p1 = myclass()
                   print(p1.x)

                 __init__ function:
                       assign value to object properties.
                 self parameter:
                       reference to the current instance of the class, and is used to access variables that belong to the class


                 class Person:
                   def __init__(self, name, age):
                     self.name = name
                     self.age = age
                 p1 = Person("zansi", 20)
                 print(p1.name)
                 print(p1.age)

                 modify object:

                    class Person:
                      def __init__(self, name, age):
                         self.name = name
                         self.age = age
                      def myfunc(self):
                         print("Hello my name is " + self.name)
                    p1 = Person("John", 36)
                    p1.name = "zansi"
                    print(p1.name)


       question1

        1.  A company decided to give bonus of 5% to employee if his/her year of service is more than 5 years.
Ask user for their salary and year of service and print the net bonus amount.

            print "enter salary"
            salary=input()
            print "enter the year"
            year=input()
            if year > 5:
              print "bonus",.05*salary
            else
              print "no bonus" 
            




